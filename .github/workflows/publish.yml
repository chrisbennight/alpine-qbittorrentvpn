name: Build docker image

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags:
      - 'v*.*.*'
    paths:
      - '.github/workflows**'
      - 'rootfs/**'
      - 'build/**'
      - 'Dockerfile'
  pull_request:
    branches:
      - 'master'
    paths:
      - '.github/workflows**'
      - 'rootfs/**'
      - 'build/**'
      - 'Dockerfile'
  workflow_dispatch:


env:
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name:  Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
            

      - name: Get latest release
        run: |
          # Fetch release information and extract the release tag
          RELEASE_TAG=$(curl -s https://api.github.com/repos/userdocs/qbittorrent-nox-static/releases/latest | jq -r '.tag_name')

          echo "RELEASE_TAG=$RELEASE_TAG" | tee -a $GITHUB_ENV
          echo "VERSION_NUMBER=$(echo $RELEASE_TAG | grep -P "\d(\.\d+)+" -o | head -n 1)" | tee -a $GITHUB_ENV

      - name: Setup vars
        run: |
          echo "DATE=$(date -u +%Y%m%d)" | tee -a $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" | tee -a $GITHUB_ENV

      # Build and push Docker image with Buildx (don't push on PR)
      - name: Build and push Docker image
        if: github.event_name != 'pull_request' && github.ref_name == 'master'
        id: build-and-push-master
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            "SOURCE_COMMIT=${{ env.SHORT_SHA }}"
          tags: |
            ghcr.io/trigus42/alpine-qbittorrentvpn:latest
            ghcr.io/trigus42/alpine-qbittorrentvpn:${{ github.head_ref || github.ref_name }}
            ghcr.io/trigus42/alpine-qbittorrentvpn:${{ github.sha }}
            ghcr.io/trigus42/alpine-qbittorrentvpn:qbt${{ env.VERSION_NUMBER }}
            ghcr.io/trigus42/alpine-qbittorrentvpn:${{ github.sha }}-qbt${{ env.VERSION_NUMBER }}
            ghcr.io/trigus42/alpine-qbittorrentvpn:qbt${{ env.VERSION_NUMBER }}-${{ env.DATE }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max



      # For use in check_update workflow
      - name: Store artifacts
        if: github.event_name != 'pull_request' && github.ref_name == 'master'
        run: |
          # Store the newly fetched release version in a file
          echo "${{ env.RELEASE_TAG }}" > qbt-release-info
          echo "Saved ${{ env.RELEASE_TAG }} to qbt-release-info"

      - name: Upload new artifacts
        if: github.event_name != 'pull_request' && github.ref_name == 'master'
        uses: actions/upload-artifact@v4
        with:
          name: qbt-release-info
          path: qbt-release-info
